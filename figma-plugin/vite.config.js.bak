import { defineConfig } from 'vite';
import { resolve } from 'path';

// Plugin code (code.ts) must be built separately from UI
export default defineConfig({
  build: {
    // Output directory for the build
    outDir: 'figma-plugin/dist',
    emptyOutDir: true,
    // Build as library
    lib: {
      // Source entry file
      entry: resolve(__dirname, 'src/code.ts'),
      // Output file
      name: 'code',
      fileName: 'code',
      // Build as IIFE (immediately invoked function expression) for Figma
      formats: ['iife'],
    },
    rollupOptions: {
      output: {
        // No external dependencies for plugin code
        inlineDynamicImports: true,
        entryFileNames: '[name].js',
      },
    },
    // Minify production builds
    minify: process.env.NODE_ENV === 'production' ? 'terser' : false,
    // Source maps for development
    sourcemap: process.env.NODE_ENV !== 'production',
  },
  // Add a second Vite configuration for the UI part
  plugins: [
    {
      name: 'figma-ui-html',
      // Custom Vite plugin to handle the UI HTML file
      buildStart() {
        this.emitFile({
          type: 'asset',
          fileName: 'ui.html',
          source: `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PixelPop</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      margin: 0;
      padding: 0;
      height: 100vh;
      overflow: hidden;
    }
    
    #root {
      height: 100%;
    }
    
    .loading {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100%;
      width: 100%;
      flex-direction: column;
      gap: 16px;
    }
    
    .loading-text {
      font-size: 14px;
      color: #333;
    }
    
    .spinner {
      border: 4px solid rgba(0, 0, 0, 0.1);
      width: 36px;
      height: 36px;
      border-radius: 50%;
      border-left-color: #18A0FB;
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div id="root">
    <div class="loading">
      <div class="spinner"></div>
      <div class="loading-text">Loading PixelPop...</div>
    </div>
  </div>

  <!-- This is where the main PixelPop app will be loaded -->
  <script type="text/javascript">
    // This script will handle communication with the Figma plugin
    // and adapt our PixelPop app to work within Figma
    
    // Send message to the plugin code
    function sendMessage(msg) {
      parent.postMessage({ pluginMessage: msg }, '*');
    }
    
    // Listen for messages from the plugin code
    window.onmessage = function(event) {
      if (event.data.pluginMessage) {
        handlePluginMessage(event.data.pluginMessage);
      }
    };
    
    function handlePluginMessage(msg) {
      // Handle messages from plugin code
      console.log('Message from plugin:', msg);
    }
    
    // Create and export pixel art to Figma
    function exportToFigma(pixelData) {
      sendMessage({
        type: 'create-pixel-art',
        pixelData: pixelData
      });
    }
    
    // Cancel and close the plugin
    function cancelPlugin() {
      sendMessage({ type: 'cancel' });
    }
    
    // Request UI resize
    function resizeUI(width, height) {
      sendMessage({
        type: 'resize-ui',
        width: width,
        height: height
      });
    }
    
    // Show notification in Figma
    function showNotification(message) {
      sendMessage({
        type: 'notify',
        message: message
      });
    }
    
    // Make these functions available to the PixelPop app
    window.figmaIntegration = {
      exportToFigma,
      cancelPlugin,
      resizeUI,
      showNotification,
      isFigmaPlugin: true
    };
    
    // TODO: Load the main PixelPop app here
    // This will require modifying the build process to create a version
    // that can be embedded in the Figma plugin
    
    // For now, just show a simple UI
    document.addEventListener('DOMContentLoaded', function() {
      const root = document.getElementById('root');
      root.innerHTML = \`
        <div style="padding: 20px; display: flex; flex-direction: column; height: calc(100% - 40px);">
          <h2>PixelPop Figma Plugin</h2>
          
          <div style="margin-top: 20px;">
            <h3>Import Pixel Art</h3>
            <p>Create pixel art using the PixelPop web application, then paste from your clipboard.</p>
            
            <div style="background-color: #f0f0f0; padding: 12px; border-radius: 4px; margin-top: 12px;">
              <h4 style="margin-top: 0;">How to use:</h4>
              <ol style="padding-left: 20px; margin-bottom: 0;">
                <li>Create your pixel art in <a href="https://peepshow.github.io/pixel-pop" target="_blank">PixelPop Web App</a></li>
                <li>Click the Export button in the toolbar</li>
                <li>Choose "Export to Figma" in the export dialog</li>
                <li>After data is copied to clipboard, come back here and click "Paste from Clipboard"</li>
              </ol>
            </div>
            
            <button onclick="pasteFromClipboard()" style="width: 100%; padding: 12px 16px; background: #18A0FB; color: white; border: none; border-radius: 4px; cursor: pointer; margin-top: 16px; font-weight: 500; display: flex; align-items: center; justify-content: center; gap: 8px;">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M16 4H18C18.5304 4 19.0391 4.21071 19.4142 4.58579C19.7893 4.96086 20 5.46957 20 6V20C20 20.5304 19.7893 21.0391 19.4142 21.4142C19.0391 21.7893 18.5304 22 18 22H6C5.46957 22 4.96086 21.7893 4.58579 21.4142C4.21071 21.0391 4 20.5304 4 20V6C4 5.46957 4.21071 4.96086 4.58579 4.58579C4.96086 4.21071 5.46957 4 6 4H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M15 2H9C8.44772 2 8 2.44772 8 3V5C8 5.55228 8.44772 6 9 6H15C15.5523 6 16 5.55228 16 5V3C16 2.44772 15.5523 2 15 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              Paste from Clipboard
            </button>
          </div>
          
          <div style="margin-top: 20px;">
            <h3>Import Test Data</h3>
            <p>Test the import functionality with sample pixel art.</p>
            <button onclick="importTestData()" style="padding: 8px 16px; background: #18A0FB; color: white; border: none; border-radius: 4px; cursor: pointer;">
              Import Test Pixel Art
            </button>
          </div>
          
          <div style="flex-grow: 1;"></div>
          
          <div style="background-color: #f9f9f9; padding: 12px; border-radius: 4px; margin-top: 20px;">
            <h4 style="margin-top: 0; color: #666;">Waiting for data...</h4>
            <p style="margin-bottom: 0; color: #666;">Keep this plugin open while working in PixelPop.</p>
          </div>
          
          <div id="status-message" style="display: none; margin-top: 16px; padding: 12px; border-radius: 4px;"></div>
          
          <div style="display: flex; justify-content: flex-end; gap: 8px; margin-top: 16px;">
            <button onclick="window.figmaIntegration.showNotification('PixelPop plugin is ready to receive pixel art')" style="padding: 8px 16px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
              Show Status
            </button>
            <button onclick="window.figmaIntegration.cancelPlugin()" style="padding: 8px 16px; background: #f0f0f0; border: 1px solid #ddd; border-radius: 4px; cursor: pointer;">
              Close Plugin
            </button>
          </div>
        </div>
      \`;
      
      // Add a function to import test data
      window.importTestData = function() {
        // Create a simple 8x8 test grid
        const grid = Array(8).fill().map(() => Array(8).fill(null));
        
        // Add a simple pattern (a heart)
        const heart = [
          [0,0,0,0,0,0,0,0],
          [0,1,1,0,0,1,1,0],
          [1,1,1,1,1,1,1,1],
          [1,1,1,1,1,1,1,1],
          [0,1,1,1,1,1,1,0],
          [0,0,1,1,1,1,0,0],
          [0,0,0,1,1,0,0,0],
          [0,0,0,0,0,0,0,0]
        ];
        
        // Fill in the colors
        heart.forEach((row, y) => {
          row.forEach((pixel, x) => {
            if (pixel === 1) {
              grid[y][x] = "#FF5555"; // Red color
            }
          });
        });
        
        // Send the test data to the plugin
        window.figmaIntegration.exportToFigma({
          grid: grid,
          width: 8,
          height: 8,
          pixelSize: 40
        });
        
        // Show notification
        window.figmaIntegration.showNotification("Importing test pixel art...");
      };
      
      // Add a function to paste from clipboard
      window.pasteFromClipboard = async function() {
        try {
          // First try to access the clipboard directly
          let clipboardText;
          
          try {
            clipboardText = await navigator.clipboard.readText();
          } catch (clipboardError) {
            console.error('Direct clipboard access failed:', clipboardError);
            
            // Fallback: Prompt the user to paste the data manually with better instructions
            const manualInput = prompt(
              "Paste your pixel art data here:\n\n" +
              "1. Make sure you've clicked 'Export to Figma' in the PixelPop web app\n" +
              "2. Press Ctrl/Cmd+V to paste the data\n" +
              "3. The data should start with 'PIXELPOP_FIGMA_DATA:'"
            );
            
            if (!manualInput) {
              window.figmaIntegration.showNotification("Operation cancelled. Try exporting again from PixelPop.");
              return;
            }
            
            clipboardText = manualInput;
          }
          
          // Check if this is PixelPop data, allowing for accidental whitespace
          const trimmedText = clipboardText.trim();
          
          if (!trimmedText.startsWith('PIXELPOP_FIGMA_DATA:')) {
            // Try to help the user by detecting JSON data without the prefix
            try {
              const possibleJsonData = JSON.parse(trimmedText);
              if (possibleJsonData.grid && Array.isArray(possibleJsonData.grid)) {
                // If it looks like valid pixel data without the prefix, try to use it
                window.figmaIntegration.showNotification("Using pasted data (missing prefix)");
                window.figmaIntegration.exportToFigma(possibleJsonData);
                return;
              }
            } catch (e) {
              // Not valid JSON, continue with normal error handling
            }
            
            window.figmaIntegration.showNotification("No valid PixelPop data found. Please try exporting again from the web app.");
            return;
          }
          
          // Extract the JSON data, allowing for the prefix appearing anywhere in the text
          const jsonStartIndex = trimmedText.indexOf('PIXELPOP_FIGMA_DATA:') + 'PIXELPOP_FIGMA_DATA:'.length;
          const jsonString = trimmedText.substring(jsonStartIndex);
          
          try {
            // Parse the JSON
            const pixelData = JSON.parse(jsonString);
            
            // Validate the data has the required fields
            if (!pixelData.grid || !Array.isArray(pixelData.grid)) {
              window.figmaIntegration.showNotification("Invalid pixel data format");
              return;
            }
            
            // Send the data to Figma
            window.figmaIntegration.exportToFigma(pixelData);
            window.figmaIntegration.showNotification("Creating pixel art in Figma...");
            
          } catch (jsonError) {
            console.error('JSON parse error:', jsonError);
            window.figmaIntegration.showNotification("Failed to parse pixel data. Please try copying and exporting again.");
          }
        } catch (error) {
          console.error('General error:', error);
          window.figmaIntegration.showNotification("An error occurred. Please try again.");
        }
      };
      
      // Function to show status messages in the UI
      window.showStatusMessage = function(message, type = 'info') {
        const statusMessage = document.getElementById('status-message');
        if (!statusMessage) return;
        
        // Set color based on message type
        let bgColor = '#f0f0f0';
        let textColor = '#333333';
        
        if (type === 'error') {
          bgColor = '#FFEBEE';
          textColor = '#C62828';
        } else if (type === 'success') {
          bgColor = '#E8F5E9';
          textColor = '#2E7D32';
        } else if (type === 'info') {
          bgColor = '#E3F2FD';
          textColor = '#1565C0';
        }
        
        statusMessage.style.backgroundColor = bgColor;
        statusMessage.style.color = textColor;
        statusMessage.innerHTML = message;
        statusMessage.style.display = 'block';
        
        // Auto-hide success messages after 5 seconds
        if (type === 'success') {
          setTimeout(() => {
            statusMessage.style.display = 'none';
          }, 5000);
        }
      };
    }
  ]
}); 